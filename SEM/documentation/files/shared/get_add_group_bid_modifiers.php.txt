<?php

/**
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Google\Ads\GoogleAds\Examples\AdvancedOperations;

//require __DIR__ . '/../../vendor/autoload.php';

use GetOpt\GetOpt;
//use Google\Ads\GoogleAds\Examples\Utils\ArgumentNames;
//use Google\Ads\GoogleAds\Examples\Utils\ArgumentParser;
use Google\Ads\GoogleAds\Lib\V1\GoogleAdsClient;
use Google\Ads\GoogleAds\Lib\V1\GoogleAdsClientBuilder;
use Google\Ads\GoogleAds\Lib\V1\GoogleAdsException;
use Google\Ads\GoogleAds\Lib\OAuth2TokenBuilder;
use Google\Ads\GoogleAds\V1\Enums\DeviceEnum\Device;
use Google\Ads\GoogleAds\V1\Errors\GoogleAdsError;
use Google\Ads\GoogleAds\V1\Services\GoogleAdsRow;
use Google\ApiCore\ApiException;

/** This example gets ad group bid modifiers. */
class GetAdGroupBidModifiers {

    const CUSTOMER_ID = 'INSERT_CUSTOMER_ID_HERE';
    // Optional: Specify an ad group ID below to restrict search to only a given ad group.
    const AD_GROUP_ID = null;
    const PAGE_SIZE = 1000;

    public static function main($customer_id = null, $ag_group_id = null) {
        // Either pass the required parameters for this example on the command line, or insert them
        // into the constants above.
        /* $options = (new ArgumentParser())->parseCommandArguments([
          ArgumentNames::CUSTOMER_ID => GetOpt::REQUIRED_ARGUMENT,
          ArgumentNames::AD_GROUP_ID => GetOpt::OPTIONAL_ARGUMENT
          ]); */
        // Generate a refreshable OAuth2 credential for authentication.
        $oAuth2Credential = (new OAuth2TokenBuilder())->fromFile()->build();

        // Construct a Google Ads client configured from a properties file and the
        // OAuth2 credentials above.
        $googleAdsClient = (new GoogleAdsClientBuilder())->fromFile()
                ->withOAuth2Credential($oAuth2Credential)
                ->build();

        try {
            $results = self::runExample($googleAdsClient, $customer_id, $ag_group_id);
        } catch (GoogleAdsException $googleAdsException) {
            printf(
                    "Request with ID '%s' has failed.%sGoogle Ads failure details:%s", $googleAdsException->getRequestId(), PHP_EOL, PHP_EOL
            );
            foreach ($googleAdsException->getGoogleAdsFailure()->getErrors() as $error) {
                /** @var GoogleAdsError $error */
                printf(
                        "\t%s: %s%s", $error->getErrorCode()->getErrorCode(), $error->getMessage(), PHP_EOL
                );
            }
        } catch (ApiException $apiException) {
            printf(
                    "ApiException was thrown with message '%s'.%s", $apiException->getMessage(), PHP_EOL
            );
        }
        return $results;
    }

    /**
     * Runs the example.
     *
     * @param GoogleAdsClient $googleAdsClient the Google Ads API client
     * @param int $customerId the client customer ID without hyphens
     * @param int $adGroupId the ad group ID for which ad group bid modifiers will be retrieved. If
     *     `null`, returns from all ad groups
     */
    public static function runExample(GoogleAdsClient $googleAdsClient, $customerId, $adGroupId) {
        $googleAdsServiceClient = $googleAdsClient->getGoogleAdsServiceClient();
        $query = 'SELECT ad_group.id, '
                . 'ad_group_bid_modifier.criterion_id, '
                . 'ad_group_bid_modifier.bid_modifier, '
                . 'ad_group_bid_modifier.device.type, '
                . 'campaign.id '
                . 'FROM ad_group_bid_modifier';
        if ($adGroupId !== null) {
            $query .= " WHERE ad_group.id = $adGroupId";
        }
        $response = $googleAdsServiceClient->search($customerId, $query, ['pageSize' => self::PAGE_SIZE]);
        $results = array();
        foreach ($response->iterateAllElements() as $googleAdsRow) {
            $type = "";
            if (!is_null($googleAdsRow->getAdGroupBidModifier()->getDevice()))
                $type = Device::name($googleAdsRow->getAdGroupBidModifier()->getDevice()->getType());
            $temp = array(
                "value" => $googleAdsRow->getAdGroupBidModifier()->getBidModifierValue(),
                "device" => $type
            );
            /** @var GoogleAdsRow $googleAdsRow */
            /* printf(
              "Ad group bid modifier with criterion ID %d, bid modifier value %f, device "
              . "type '%s' was found in an ad group ID %d of campaign ID %d.%s", $googleAdsRow->getAdGroupBidModifier()->getCriterionIdValue(), $googleAdsRow->getAdGroupBidModifier()->getBidModifierValue(), Device::name($googleAdsRow->getAdGroupBidModifier()->getDevice()->getType()), $googleAdsRow->getAdGroup()->getIdValue(), $googleAdsRow->getCampaign()->getIdValue(), PHP_EOL
              ); */
            array_push($results, $temp);
        }
        return $results;
    }

}

$customer_id = $customer_id;
$ad_group_id = $ad_group_id;
$modifier = GetAdGroupBidModifiers::main($customer_id, $ad_group_id);

