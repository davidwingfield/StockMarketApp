<?php

/**
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Google\Ads\GoogleAds\Examples\BasicOperations;

use GetOpt\GetOpt;
use Google\Ads\GoogleAds\Examples\Utils\ArgumentNames;
use Google\Ads\GoogleAds\Examples\Utils\ArgumentParser;
use Google\Ads\GoogleAds\Lib\V1\GoogleAdsClient;
use Google\Ads\GoogleAds\Lib\V1\GoogleAdsClientBuilder;
use Google\Ads\GoogleAds\Lib\V1\GoogleAdsException;
use Google\Ads\GoogleAds\Lib\OAuth2TokenBuilder;
use Google\Ads\GoogleAds\V1\Errors\GoogleAdsError;
use Google\Ads\GoogleAds\V1\Services\GoogleAdsRow;
use Google\ApiCore\ApiException;

/** This example retrieves ad groups. */
class GetAdGroups {

    const CUSTOMER_ID = '7703394105';
    // Optional: Specify a campaign ID below to restrict search to only a given campaign.
    const CAMPAIGN_ID = null;
    const PAGE_SIZE = 1000;

    public static function main($customer_id = null, $campaign_id = null, $scenario = null) {

        $options = (new ArgumentParser())->parseCommandArguments([
            ArgumentNames::CUSTOMER_ID => GetOpt::REQUIRED_ARGUMENT,
            ArgumentNames::CAMPAIGN_ID => GetOpt::OPTIONAL_ARGUMENT
        ]);

        $oAuth2Credential = (new OAuth2TokenBuilder())->fromFile()->build();

        $googleAdsClient = (new GoogleAdsClientBuilder())->fromFile()
                ->withOAuth2Credential($oAuth2Credential)
                ->build();

        try {
            $results = self::runExample($googleAdsClient, $customer_id, $campaign_id ?: self::CAMPAIGN_ID, $scenario);
        } catch (GoogleAdsException $googleAdsException) {
            $results["status"] = "error";
            $message = $googleAdsException->getRequestId();
            $results["results"] = "Request with ID '$message' has failed.";
            $results["errors"] = array();
            foreach ($googleAdsException->getGoogleAdsFailure()->getErrors() as $error) {
                $error_code = $error->getErrorCode()->getErrorCode();
                $error_message = $error->getMessage();
                $temp = array(
                    "code" => $error_code,
                    "message" => $error_message
                );
                array_push($results["errors"], $temp);
            }
        } catch (ApiException $apiException) {
            $results["status"] = "error";
            $message = $apiException->getMessage();
            $results["errors"] = array();
        }
        return $results;
    }

    public static function runExample(GoogleAdsClient $googleAdsClient, $customerId, $campaignId, $scenario) {
        $results = array();
        $googleAdsServiceClient = $googleAdsClient->getGoogleAdsServiceClient();
        $query = "SELECT campaign.name, campaign.id, ad_group.id, ad_group.name FROM ad_group";
        if ($campaignId !== null) {
            $query .= " WHERE campaign.id = $campaignId";
        }
        $response = $googleAdsServiceClient->search($customerId, $query, ['pageSize' => self::PAGE_SIZE]);
        $results["status"] = "success";
        $results["results"] = array();
        foreach ($response->iterateAllElements() as $googleAdsRow) {
            $temp = array(
                "id" => $googleAdsRow->getAdGroup()->getId()->getValue(),
                "text" => $googleAdsRow->getAdGroup()->getName()->getValue()
            );
            if (array_key_exists($googleAdsRow->getAdGroup()->getId()->getValue(), $scenario)) {
                $temp["checked"] = true;
            }
            if (array_key_exists($googleAdsRow->getCampaign()->getId()->getValue(), $results["results"])) {
                
            } else {
                $results["results"][$googleAdsRow->getCampaign()->getId()->getValue()] = array(
                    "text" => $googleAdsRow->getCampaign()->getName()->getValue(),
                    "children" => array()
                );
            }
            array_push($results["results"][$googleAdsRow->getCampaign()->getId()->getValue()]["children"], $temp);
        }
        return $results;
    }

}

$customer_id = $accountId;
$arr1 = explode(",", $scenario["ad_group_list"]);
$arr2 = array();
for ($n = 0; $n < count($arr1); $n++) {
    if (array_key_exists($arr1[$n], $arr2)) {
        
    } else {
        $arr2[$arr1[$n]] = 1;
    }
}
$ad_groups = GetAdGroups::main($customer_id, null, $arr2);
$temp = array();
foreach ($ad_groups["results"] as $key => $value) {
    array_push($temp, $value);
}
//echo "<pre>" . var_export($temp, ",") . "</pre>";
//echo "<pre>" . var_export($arr2, ",") . "</pre>";
//die();
return $temp;

